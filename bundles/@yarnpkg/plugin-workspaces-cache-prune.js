/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-workspaces-cache-prune",
factory: function (require) {
var plugin=(()=>{var f=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var u=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(s,i)=>(typeof require<"u"?require:s)[i]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var x=(t,s)=>{for(var i in s)f(t,i,{get:s[i],enumerable:!0})},S=(t,s,i,o)=>{if(s&&typeof s=="object"||typeof s=="function")for(let a of k(s))!y.call(t,a)&&a!==i&&f(t,a,{get:()=>s[a],enumerable:!(o=g(s,a))||o.enumerable});return t};var v=t=>S(f({},"__esModule",{value:!0}),t);var R={};x(R,{default:()=>D});var c=u("clipanion"),d=u("@yarnpkg/cli"),n=u("@yarnpkg/core"),p=class extends d.BaseCommand{constructor(){super(...arguments);this.json=c.Option.Boolean("--json",!1,{description:"Format the output as an NDJSON stream"});this.production=c.Option.Boolean("--production",!1,{description:"Only install regular dependencies by omitting dev dependencies"});this.workspaces=c.Option.Rest()}async execute(){let i=await n.Configuration.find(this.context.cwd,this.context.plugins),{project:o,workspace:a}=await n.Project.find(i,this.context.cwd),l=await n.Cache.find(i);await o.restoreInstallState({restoreResolutions:!1});let r;if(this.workspaces.length===0){if(!a)throw new d.WorkspaceRequiredError(o.cwd,this.context.cwd);r=new Set([a])}else r=new Set(this.workspaces.map(e=>o.getWorkspaceByIdent(n.structUtils.parseIdent(e))));for(let e of r)for(let m of this.production?["dependencies"]:n.Manifest.hardDependencies)for(let h of e.manifest.getForScope(m).values()){let w=o.tryWorkspaceByDescriptor(h);w!==null&&r.add(w)}for(let e of o.workspaces)r.has(e)?this.production&&e.manifest.devDependencies.clear():(e.manifest.installConfig=e.manifest.installConfig||{},e.manifest.installConfig.selfReferences=!1,e.manifest.dependencies.clear(),e.manifest.devDependencies.clear(),e.manifest.peerDependencies.clear(),e.manifest.scripts.clear());return(await n.StreamReport.start({configuration:i,json:this.json,stdout:this.context.stdout,includeLogs:!0},async e=>{await o.resolveEverything({cache:l,report:e}),await o.linkEverything({cache:l,report:e}),await o.cacheCleanup({cache:l,report:e})})).exitCode()}};p.paths=[["workspaces-cache-prune"]];var j={commands:[p]},D=j;return v(R);})();
return plugin;
}
};
