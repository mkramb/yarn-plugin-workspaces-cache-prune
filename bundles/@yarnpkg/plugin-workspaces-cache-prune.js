/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-workspaces-cache-prune",
factory: function (require) {
var plugin=(()=>{var k=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var D=Object.prototype.hasOwnProperty;var u=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(o,r)=>(typeof require<"u"?require:o)[r]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var P=(t,o)=>{for(var r in o)k(t,r,{get:o[r],enumerable:!0})},W=(t,o,r,s)=>{if(o&&typeof o=="object"||typeof o=="function")for(let n of x(o))!D.call(t,n)&&n!==r&&k(t,n,{get:()=>o[n],enumerable:!(s=v(o,n))||s.enumerable});return t};var R=t=>W(k({},"__esModule",{value:!0}),t);var T={};P(T,{default:()=>M});var w=u("fs"),y=u("clipanion"),h=u("@yarnpkg/cli"),e=u("@yarnpkg/core"),g=class extends h.BaseCommand{constructor(){super(...arguments);this.workspaces=y.Option.Rest()}async execute(){let r=await e.Configuration.find(this.context.cwd,this.context.plugins),{project:s,workspace:n}=await e.Project.find(r,this.context.cwd),p;if(this.workspaces.length===0){if(!n)throw new h.WorkspaceRequiredError(s.cwd,this.context.cwd);p=new Set([n])}else p=new Set(this.workspaces.map(c=>s.getWorkspaceByIdent(e.structUtils.parseIdent(c))));for(let c of p)for(let a of e.Manifest.allDependencies)for(let i of c.manifest.getForScope(a).values()){let d=s.tryWorkspaceByDescriptor(i);d!==null&&p.add(d)}let f=await e.Cache.find(r),l=new Map;await s.resolveEverything({cache:f,report:new e.ThrowReport}),await s.fetchEverything({cache:f,report:new e.ThrowReport}),s.forgetVirtualResolutions();let m=c=>{for(let a of c.values()){let i=s.storedPackages.get(s.storedResolutions.get(a.descriptorHash)),d=e.structUtils.slugifyLocator(i);l.has(d)||(l.set(d,!0),m(i.dependencies))}};for(let c of s.storedPackages.values()){let a=e.structUtils.slugifyLocator(c);for(let i of p)i.manifest.hasDependency(c)&&(l.set(a,!0),m(c.dependencies))}let S=(0,w.readdirSync)(f.cwd);for(let c of S){let a=c.match(/(.*)-.+/);(!a||l.get(a[1])!==!0)&&(0,w.unlinkSync)(`${f.cwd}/${c}`)}console.log("Cache pruned for selected workspaces.")}};g.paths=[["workspaces-cache-prune"]];var I={commands:[g]},M=I;return R(T);})();
return plugin;
}
};
