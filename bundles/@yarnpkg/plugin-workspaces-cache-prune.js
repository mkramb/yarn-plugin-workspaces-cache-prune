/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-workspaces-cache-prune",
factory: function (require) {
var plugin=(()=>{var y=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var H=Object.prototype.hasOwnProperty;var h=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(s,a)=>(typeof require<"u"?require:s)[a]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var W=(t,s)=>{for(var a in s)y(t,a,{get:s[a],enumerable:!0})},I=(t,s,a,o)=>{if(s&&typeof s=="object"||typeof s=="function")for(let i of x(s))!H.call(t,i)&&i!==a&&y(t,i,{get:()=>s[i],enumerable:!(o=S(s,i))||o.enumerable});return t};var L=t=>I(y({},"__esModule",{value:!0}),t);var T={};W(T,{default:()=>R});var k=h("fs"),D=h("clipanion"),m=h("@yarnpkg/cli"),e=h("@yarnpkg/core"),w=class extends m.BaseCommand{constructor(){super(...arguments);this.workspaces=D.Option.Rest()}async execute(){let a=await e.Configuration.find(this.context.cwd,this.context.plugins),{project:o,workspace:i}=await e.Project.find(a,this.context.cwd),d;if(this.workspaces.length===0){if(!i)throw new m.WorkspaceRequiredError(o.cwd,this.context.cwd);d=new Set([i])}else d=new Set(this.workspaces.map(r=>o.getWorkspaceByIdent(e.structUtils.parseIdent(r))));for(let r of d)for(let c of e.Manifest.allDependencies)for(let f of r.manifest.getForScope(c).values()){let p=o.tryWorkspaceByDescriptor(f);p!==null&&d.add(p)}let u=await e.Cache.find(a),g=new Map;await o.resolveEverything({cache:u,report:new e.ThrowReport}),await o.fetchEverything({cache:u,report:new e.ThrowReport});let v=r=>{for(let c of r.values()){let f=o.storedResolutions.get(e.structUtils.isVirtualDescriptor(c)?e.structUtils.devirtualizeDescriptor(c).descriptorHash:c.descriptorHash),p=o.storedPackages.get(f),n=e.structUtils.slugifyLocator(p);g.has(n)||(g.set(n,!0),v(p.dependencies))}};for(let r of d){let c=r.manifest.dependencies;for(let[f,p]of c){let n;for(let l of o.storedPackages.values())l.identHash===f&&e.semverUtils.satisfiesWithPrereleases(l.version,p.range,!1)&&(n=l);if(n){let l=e.structUtils.slugifyLocator(e.structUtils.isVirtualLocator(n)?e.structUtils.devirtualizeLocator(n):n);g.set(l,!0),v(n.dependencies)}}}let P=(0,k.readdirSync)(u.cwd);for(let r of P){let c=r.match(/(.*)-.+/);(!c||g.get(c[1])!==!0)&&(0,k.unlinkSync)(`${u.cwd}/${r}`)}console.log("Cache pruned for selected workspaces.")}};w.paths=[["workspaces-cache-prune"]];var M={commands:[w]},R=M;return L(T);})();
return plugin;
}
};
